# –°–ê–ú –ë–û–¢ –ó–î–ï–°–¨: http://t.me/YLWordBot
import logging  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª–∞—Å—Å—ã.
import json
import random
from telegram.ext import Updater, MessageHandler, Filters, CommandHandler, ConversationHandler
from telegram import ReplyKeyboardMarkup

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG)  # –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

logger = logging.getLogger(__name__)

TOKEN = '5296394501:AAEjbMymwTSV-nQCCHbLsNBlIvvDvszRGl4'

with open('sorted_cities.json', encoding="utf-8") as city_file:  # –ì–æ—Ä–æ–¥–æ–≤ –≤—Å–µ–≥–æ: 10969
    city_data = json.load(city_file)

used_cities = []  # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏–≥—Ä—ã "–ì–æ—Ä–æ–¥–∞"
phrases = ["–ü—Ä–∏–Ω—è—Ç–æ!", "–°–ª—ã—à–∞–ª —á—Ç–æ-—Ç–æ –∑–Ω–∞–∫–æ–º–æ–µ...", "–ó–∞–ø–∏—Å–∞–ª!", "–¢–∞–∫ –∑–Ω–∞—á–∏—Ç? –ù—É –¥–µ—Ä–∂–∏—Å—å —Ç–æ–≥–¥–∞!", "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –º–µ—Å—Ç–µ—á–∫–æ!",
           "–Ø –±—ã —Ö–æ—Ç–µ–ª —Ç–∞–º –æ–∫–∞–∑–∞—Ç—å—Å—è...", "–ù–∏ –∑–∞ —á—Ç–æ —Ç—É–¥–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—é—Å—å.", "–¢–∞–∫–æ–π —Å–µ–±–µ –≥–æ—Ä–æ–¥, —è –±—ã —Ç–∞–º –Ω–µ –∂–∏–ª.",
           "–ó–∞—Å—á–∏—Ç—ã–≤–∞—é!",
           "–ò —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥ –±—ã–≤–∞–µ—Ç?", "–ß–µ–≥–æ —Ç–æ–ª—å–∫–æ –ª—é–¥–∏ –Ω–µ –ø—Ä–∏–¥—É–º–∞—é—Ç..."]

music_list_classic = [
    ['–ú–µ–ª–æ–¥–∏—è1.mp3', '/Bach', 'Toccata and Fugue in D minor', '/Glinka', '/Schubert', '/Chajjkovskijj'],
    ['–ú–µ–ª–æ–¥–∏—è2.mp3', '/Betkhoven', 'lunnaja-sonata', '/Chopin', '/Vivaldi', '/Bach'],
    ['–ú–µ–ª–æ–¥–∏—è3.mp3', '/Grig', 'per-gjunt-v-peshhere-gornogo-korolja', '/Mocart', '/Bach', '/Glinka'],
    ['–ú–µ–ª–æ–¥–∏—è4.mp3', '/Glinka', 'Marsh_Chernomora', '/Vivaldi', '/Schubert', '/Chajjkovskijj'],
    ['–ú–µ–ª–æ–¥–∏—è5.mp3', '/Mocart', 'zhenitba-figaro', '/Chajjkovskijj', '/Bach', '/Chopin'],
    ['–ú–µ–ª–æ–¥–∏—è6.mp3', '/Mocart', 'Piano Sonata 11 A', '/Chopin', '/Betkhoven', '/Grig'],
    ['–ú–µ–ª–æ–¥–∏—è7.mp3', '/Chajjkovskijj', 'shhelkunchik-vals-cvetov', '/Mocart', '/Bach', '/Glinka'],
    ['–ú–µ–ª–æ–¥–∏—è8.mp3', '/Chajjkovskijj', 'Tanec_malenkikh_lebedejj_iz_baleta_Lebedinoe_ozero',
     '/Vivaldi', '/Schubert', '/Bach'],
    ['–ú–µ–ª–æ–¥–∏—è9.mp3', '/Vivaldi', 'vremena-goda-vesna', '/Betkhoven', '/Mocart', '/Grig']]
music_list_classic_new = music_list_classic
ans_music = ''
nomer = 0
points = 0


def start(update, context):  # –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_name = update.message.chat.first_name
    update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {user_name} üòä")
    reply_keyboard = [['/skills']]  # –∫–Ω–æ–ø–∫–∞
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    update.message.reply_text("–ú–µ–Ω—è –∑–æ–≤—É—Ç –°–ª–æ–≤–µ—Å–Ω—ã–π –±–æ—Ç", reply_markup=markup)


def skills(update, context):
    reply_keyboard = [['/play', '/clear']]  # –∫–Ω–æ–ø–∫–∞
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    text = '\n'.join(["‚úÖ /play - –≤—ã–±—Ä–∞—Ç—å –∏ —Å—ã–≥—Ä–∞—Ç—å —Å –±–æ—Ç–æ–º –≤ —Å–ª–æ–≤–µ—Å–Ω—É—é –∏–≥—Ä—É", "‚úÖ /clear - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è"])
    update.message.reply_text(text, reply_markup=markup)


def play(update, context):
    reply_keyboard = [['/goroda', '/balabolka'], ['/quiz']]  # –∫–Ω–æ–ø–∫–∞
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    update.message.reply_text('–í –∫–∞–∫—É—é –∏–≥—Ä—É —Ç—ã —Ö–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å?', reply_markup=markup)


def clear(update, context):  # ---–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã---
    pass


def quiz(update, context):  # –∏–≥—Ä–∞ - –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞
    reply_keyboard = [['/–∏—Å—Ç–æ—Ä–∏—è', '/–ª–æ–≥–∏–∫–∞'], ['/–∫–∞—Ä—Ç–∏–Ω–∫–∏', '/music']]  # –∫–Ω–æ–ø–∫–∞
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    update.message.reply_text('–í –∫–∞–∫—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å?', reply_markup=markup)


def music(update, context):  # –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞, –º—É–∑—ã–∫–∞
    global music_list_classic_new, nomer, points
    nomer = 0
    points = 0
    random.shuffle(music_list_classic, random.random)
    music_list_classic_new = music_list_classic
    reply_keyboard = [['/contemporary', '/classic']]  # –∫–Ω–æ–ø–∫–∞
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É', reply_markup=markup)


def classic(update, context):  # –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞, –º—É–∑—ã–∫–∞
    global ans_music, nomer
    if nomer != 9:
        options = [music_list_classic_new[nomer][1], music_list_classic_new[nomer][-1],
                   music_list_classic_new[nomer][-2], music_list_classic_new[nomer][-3]]
        ans_music = options[0][::]
        random.shuffle(options, random.random)
        reply_keyboard = [[options[0], options[1]], [options[2], options[3]]]  # –∫–Ω–æ–ø–∫–∞
        markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
        chat_id = update.message.chat.id
        meleodia = music_list_classic_new[nomer][0]
        nomer += 1
        context.bot.send_audio(chat_id=chat_id, audio=open(meleodia, 'rb'))
        update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–∞', reply_markup=markup)
    else:
        text = '–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ' + str(points) + ' –∏–∑ 9'
        update.message.reply_text(text)


def bach(update, context):
    global points
    reply_keyboard = [['/next']]  # –∫–Ω–æ–ø–∫–∞
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    if ans_music == '/Bach':
        update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ', reply_markup=markup)
        points += 1
    else:
        text = '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ' + ans_music[1:]
        update.message.reply_text(text, reply_markup=markup)


def glinka(update, context):
    global points
    reply_keyboard = [['/next']]  # –∫–Ω–æ–ø–∫–∞
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    if ans_music == '/Glinka':
        update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ', reply_markup=markup)
        points += 1
    else:
        text = '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ' + ans_music[1:]
        update.message.reply_text(text, reply_markup=markup)


def schubert(update, context):
    global points
    reply_keyboard = [['/next']]  # –∫–Ω–æ–ø–∫–∞
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    if ans_music == '/Schubert':
        update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ', reply_markup=markup)
        points += 1
    else:
        text = '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ' + ans_music[1:]
        update.message.reply_text(text, reply_markup=markup)


def chajjkovskijj(update, context):
    global points
    reply_keyboard = [['/next']]  # –∫–Ω–æ–ø–∫–∞
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    if ans_music == '/Chajjkovskijj':
        update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ', reply_markup=markup)
        points += 1
    else:
        text = '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ' + ans_music[1:]
        update.message.reply_text(text, reply_markup=markup)


def betkhoven(update, context):
    global points
    reply_keyboard = [['/next']]  # –∫–Ω–æ–ø–∫–∞
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    if ans_music == '/Betkhoven':
        update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ', reply_markup=markup)
        points += 1
    else:
        text = '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ' + ans_music[1:]
        update.message.reply_text(text, reply_markup=markup)


def chopin(update, context):
    global points
    reply_keyboard = [['/next']]  # –∫–Ω–æ–ø–∫–∞
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    if ans_music == '/Chopin':
        update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ', reply_markup=markup)
        points += 1
    else:
        text = '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ' + ans_music[1:]
        update.message.reply_text(text, reply_markup=markup)


def vivaldi(update, context):
    global points
    reply_keyboard = [['/next']]  # –∫–Ω–æ–ø–∫–∞
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    if ans_music == '/Vivaldi':
        update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ', reply_markup=markup)
        points += 1
    else:
        text = '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ' + ans_music[1:]
        update.message.reply_text(text, reply_markup=markup)


def grig(update, context):
    global points
    reply_keyboard = [['/next']]  # –∫–Ω–æ–ø–∫–∞
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    if ans_music == '/Grig':
        update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ', reply_markup=markup)
        points += 1
    else:
        text = '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ' + ans_music[1:]
        update.message.reply_text(text, reply_markup=markup)


def mocart(update, context):
    global points
    reply_keyboard = [['/next']]  # –∫–Ω–æ–ø–∫–∞
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    if ans_music == '/Mocart':
        update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ', reply_markup=markup)
        points += 1
    else:
        text = '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ' + ans_music[1:]
        update.message.reply_text(text, reply_markup=markup)


def call_back(update, context):
    chat_id = update.message.chat.id
    context.bot.send_photo(chat_id=chat_id, photo=open('–ö–∞—Ä—Ç–∏–Ω–∫–∞.jpg', 'rb'))


def start_balabolka(update, context):  # ---–ù–ê–ß–ê–õ–û –ö–û–î–ê –ù–ê–î –ö–û–¢–û–†–´–ú –†–ê–ë–û–¢–ê–ï–¢ –í–ê–ù–Ø---
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ –∏–≥—Ä–µ –±–∞–ª–∞–±–æ–ª–∫–∞! –ù–∞–ø–∏—à–∏ \'Go\', –µ—Å–ª–∏ —Ö–æ—á–µ—à—å, "
        "—á—Ç–æ–± –º—ã –Ω–∞—á–∞–ª–∏. –í –ª—é–±–æ–µ –≤—Ä–µ–º—è –Ω–∞–ø–∏—à–∏ /stop –∏ –º—ã –∑–∞–∫–æ–Ω—á–∏–º –∏–≥—Ä—É")
    return 1


def sure_balabolka(update, context):
    ans = update.message.text
    if ans.lower().capitalize() == "Go":
        print(
            "–û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–Ω–∏ –ø–µ—á–∞—Ç–∞—Ç—å –∫–∞–∫–æ–µ-–ª–∏–±–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –∏ —è –Ω–∞ –Ω–µ–≥–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ–∫—Å—Ç. –ó–∞—Ç–µ–º —Ç—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ—à—å –∏ —Ç.–¥.")
        return 2
    update.message.reply_text('–ù–µ –ø–æ–Ω—è–ª —Ç–µ–±—è. –ü–æ–≤—Ç–æ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.')
    return 1


def balabolka_computer_turn(update, context):
    text = update.message.text
    pass


def start_goroda(update, context):
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ –∏–≥—Ä–µ –≥–æ—Ä–æ–¥–∞! –ù–∞–ø–∏—à–∏ \'Go\', –µ—Å–ª–∏ —Ö–æ—á–µ—à—å, "
        "—á—Ç–æ–± –º—ã –Ω–∞—á–∞–ª–∏. –í –ª—é–±–æ–µ –≤—Ä–µ–º—è –Ω–∞–ø–∏—à–∏ /stop –∏ –º—ã –∑–∞–∫–æ–Ω—á–∏–º –∏–≥—Ä—É")
    return 1


def sure_goroda(update, context):
    ans = update.message.text
    if ans.lower().capitalize() == "Go":
        temp = list(city_data.keys())
        temp = random.choice(temp)
        temp = city_data[temp]
        word = random.choice(temp)
        used_cities.append(word)
        update.message.reply_text(f'–û—Ç–ª–∏—á–Ω–æ. –Ø –Ω–∞—á–Ω—É. –ú–æ–π –≥–æ—Ä–æ–¥: {word}')
        return 2
    update.message.reply_text('–ù–µ –ø–æ–Ω—è–ª —Ç–µ–±—è. –ü–æ–≤—Ç–æ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.')
    return 1


def goroda_player_turn(update, context):
    word = update.message.text
    word = ' '.join([i.lower().capitalize() for i in word.split()])
    word = '-'.join([i.lower().capitalize() for i in word.split('-')])
    word.replace("-–ù–∞-", "-–Ω–∞-")
    word.replace("-–û–Ω-", '-–æ–Ω-')
    word = word.replace('—ë', 'e')
    word = word.replace('–Å', '–ï')
    try:
        first_key_words = city_data[word[0].upper()]
        if word in used_cities:
            update.message.reply_text(f'–ì–æ—Ä–æ–¥ {word} —É–∂–µ —É–ø–æ–º–∏–Ω–∞–ª—Å—è. –î–∞–≤–∞–π –µ—â—ë —Ä–∞–∑ –∏ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–π—Å—è!')
            return 2
        if word not in first_key_words:
            update.message.reply_text('–ù–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ')
            print(word)
            print(first_key_words)
            return 2
        if not (used_cities[-1][-1] == word[0].lower() or
                used_cities[-1][-2] == word[0].lower() and used_cities[-1][-1].lower() in '—ä—ã—å'):
            update.message.reply_text('–ù–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –±—É–∫–≤–æ–π')
            return 2
        used_cities.append(word)
        print(used_cities)
        word = goroda_computer_turn()
        update.message.reply_text(f'{random.choice(phrases)} –ú–æ–π –≥–æ—Ä–æ–¥: {word}')
        return 2
    except KeyError:
        print("–¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ø–í–ù–û –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return 2


def goroda_computer_turn():
    next_key = used_cities[-1][-1].capitalize()
    if next_key in '–™–´–¨':
        next_key = used_cities[-1][-2].capitalize()
    word = random.choice(city_data[next_key])
    while word in used_cities:
        print(' –∑–∞—Å—Ç—Ä—è–ª')
        word = random.choice(city_data[next_key])
    used_cities.append(word)
    return word


def stop_goroda(update, context):
    update.message.reply_text("–ü—Ä–∏–Ω—è—Ç–æ! –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø–æ–∏–≥—Ä–∞–ª–∏!")
    used_cities.clear()
    return ConversationHandler.END  # --- –ö–û–ù–ï–¶ –ö–û–î–ê –ù–ê–î –ö–û–¢–û–†–´–ú –†–ê–ë–û–¢–ê–ï–¢ –í–ê–ù–Ø ---


def main():
    updater = Updater(
        TOKEN)  # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç updater. # –í–º–µ—Å—Ç–æ —Å–ª–æ–≤–∞ "TOKEN" –Ω–∞–¥–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç @BotFather —Ç–æ–∫–µ–Ω

    dp = updater.dispatcher  # –ü–æ–ª—É—á–∞–µ–º –∏–∑ –Ω–µ–≥–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π.

    conv_handler_goroda = ConversationHandler(
        entry_points=[CommandHandler('goroda', start_goroda)],  # –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –¥–∏–∞–ª–æ–≥.
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ –¥–∏–∞–ª–æ–≥–∞.
        # –í–∞—Ä–∏–∞–Ω—Ç —Å –¥–≤—É–º—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏, —Ñ–∏–ª—å—Ç—Ä—É—é—â–∏–º–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
        states={
            # –§—É–Ω–∫—Ü–∏—è —á–∏—Ç–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏ –∑–∞–¥–∞—ë—Ç –≤—Ç–æ—Ä–æ–π.
            1: [MessageHandler(Filters.text & ~Filters.command, sure_goroda)],
            2: [MessageHandler(Filters.text & ~Filters.command, goroda_player_turn)],
        },
        fallbacks=[CommandHandler('stop', stop_goroda)]  # –¢–æ—á–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞. –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ ‚Äî –∫–æ–º–∞–Ω–¥–∞ /stop.
    )

    conv_handler_balabolka = ConversationHandler(
        entry_points=[CommandHandler('balabolka', start_balabolka)],  # –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –¥–∏–∞–ª–æ–≥.
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ –¥–∏–∞–ª–æ–≥–∞.
        # –í–∞—Ä–∏–∞–Ω—Ç —Å –¥–≤—É–º—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏, —Ñ–∏–ª—å—Ç—Ä—É—é—â–∏–º–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
        states={
            # –§—É–Ω–∫—Ü–∏—è —á–∏—Ç–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏ –∑–∞–¥–∞—ë—Ç –≤—Ç–æ—Ä–æ–π.
            1: [MessageHandler(Filters.text & ~Filters.command, sure_balabolka)],
            2: [MessageHandler(Filters.text & ~Filters.command, balabolka_computer_turn)],
        },
        fallbacks=[CommandHandler('stop', stop_goroda)]  # –¢–æ—á–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞. –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ ‚Äî –∫–æ–º–∞–Ω–¥–∞ /stop.
    )

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("skills", skills))
    dp.add_handler(CommandHandler("play", play))
    dp.add_handler(CommandHandler("clear", clear))
    dp.add_handler(CommandHandler("quiz", quiz))
    dp.add_handler(CommandHandler("music", music))
    dp.add_handler(CommandHandler("classic", classic))
    dp.add_handler(CommandHandler("next", classic))
    dp.add_handler(CommandHandler("Bach", bach))
    dp.add_handler(CommandHandler("Glinka", glinka))
    dp.add_handler(CommandHandler("Schubert", schubert))
    dp.add_handler(CommandHandler("Chajjkovskijj", chajjkovskijj))
    dp.add_handler(CommandHandler("Betkhoven", betkhoven))
    dp.add_handler(CommandHandler("Chopin", chopin))
    dp.add_handler(CommandHandler("Vivaldi", vivaldi))
    dp.add_handler(CommandHandler("Grig", grig))
    dp.add_handler(CommandHandler("Mocart", mocart))

    dp.add_handler(conv_handler_goroda)
    dp.add_handler(conv_handler_balabolka)

    updater.start_polling()  # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –ø—Ä–∏–µ–º–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
    updater.idle()  # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. # (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ SIG_TERM –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–ª–∞–≤–∏—à Ctrl+C)


if __name__ == '__main__':  # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é main() –≤ —Å–ª—É—á–∞–µ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞.
    main()
