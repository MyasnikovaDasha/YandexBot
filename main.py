# –°–ê–ú –ë–û–¢ –ó–î–ï–°–¨: http://t.me/YLWordBot
import logging  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª–∞—Å—Å—ã.
import json
import random
import sys
import requests
from telegram.ext import Updater, MessageHandler, Filters, CommandHandler, ConversationHandler
from telegram import ReplyKeyboardMarkup

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG)  # –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

logger = logging.getLogger(__name__)

TOKEN = '5296394501:AAEjbMymwTSV-nQCCHbLsNBlIvvDvszRGl4'

with open('sorted_russian_cities.json', encoding="utf-8") as city_file:
    city_data = json.load(city_file)

used_cities = {}  # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏–≥—Ä—ã "–ì–æ—Ä–æ–¥–∞"
used_cities_log = []
ban = ['—å', '—ã', '—ä', '–π']
phrases = ["–ü—Ä–∏–Ω—è—Ç–æ!", "–°–ª—ã—à–∞–ª —á—Ç–æ-—Ç–æ –∑–Ω–∞–∫–æ–º–æ–µ...", "–ó–∞–ø–∏—Å–∞–ª!", "–¢–∞–∫ –∑–Ω–∞—á–∏—Ç? –ù—É –¥–µ—Ä–∂–∏—Å—å —Ç–æ–≥–¥–∞!", "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –º–µ—Å—Ç–µ—á–∫–æ!",
           "–Ø –±—ã —Ö–æ—Ç–µ–ª —Ç–∞–º –æ–∫–∞–∑–∞—Ç—å—Å—è...", "–ù–∏ –∑–∞ —á—Ç–æ —Ç—É–¥–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—é—Å—å.", "–¢–∞–∫–æ–π —Å–µ–±–µ –≥–æ—Ä–æ–¥, —è –±—ã —Ç–∞–º –Ω–µ –∂–∏–ª.",
           "–ó–∞—Å—á–∏—Ç—ã–≤–∞—é!",
           "–ò —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥ –±—ã–≤–∞–µ—Ç?", "–ß–µ–≥–æ —Ç–æ–ª—å–∫–æ –ª—é–¥–∏ –Ω–µ –ø—Ä–∏–¥—É–º–∞—é—Ç..."]

music_list_classic = [
    ['–ú–µ–ª–æ–¥–∏—è1.mp3', '/Bach', 'Toccata and Fugue in D minor', '/Glinka', '/Schubert', '/Chajjkovskijj'],
    ['–ú–µ–ª–æ–¥–∏—è2.mp3', '/Betkhoven', 'lunnaja-sonata', '/Chopin', '/Vivaldi', '/Bach'],
    ['–ú–µ–ª–æ–¥–∏—è3.mp3', '/Grig', 'per-gjunt-v-peshhere-gornogo-korolja', '/Mocart', '/Bach', '/Glinka'],
    ['–ú–µ–ª–æ–¥–∏—è4.mp3', '/Glinka', 'Marsh_Chernomora', '/Vivaldi', '/Schubert', '/Chajjkovskijj'],
    ['–ú–µ–ª–æ–¥–∏—è5.mp3', '/Mocart', 'zhenitba-figaro', '/Chajjkovskijj', '/Bach', '/Chopin'],
    ['–ú–µ–ª–æ–¥–∏—è6.mp3', '/Mocart', 'Piano Sonata 11 A', '/Chopin', '/Betkhoven', '/Grig'],
    ['–ú–µ–ª–æ–¥–∏—è7.mp3', '/Chajjkovskijj', 'shhelkunchik-vals-cvetov', '/Mocart', '/Bach', '/Glinka'],
    ['–ú–µ–ª–æ–¥–∏—è8.mp3', '/Chajjkovskijj', 'Tanec_malenkikh_lebedejj_iz_baleta_Lebedinoe_ozero',
     '/Vivaldi', '/Schubert', '/Bach'],
    ['–ú–µ–ª–æ–¥–∏—è9.mp3', '/Vivaldi', 'vremena-goda-vesna', '/Betkhoven', '/Mocart',
     '/Grig']]  # —Å–ø–∏—Å–æ–∫ –º–µ–ª–æ–¥–∏–π –¥–ª—è –∏–≥—Ä—ã –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É: –º—É–∑—ã–∫–∞, –∫–ª–∞—Å—Å–∏–∫–∞

music_list_contemporary = [['–ü–µ—Å–Ω—è1.mp3', '/Konfuz', '/Egor_Creed', '/Slava_Marlow', '/Timati'],
                           ['–ü–µ—Å–Ω—è2.mp3', '/Alex_Ataman', '/Feduk', '/Morgenshtern', '/Mucca'],
                           ['–ü–µ—Å–Ω—è3.mp3', '/Jony', '/Egor_Creed', '/Feduk', '/Danya_Milokhin'],
                           ['–ü–µ—Å–Ω—è4.mp3', '/Klava_Koka', '/Mia_Boyko', '/Dora', '/Polina_Gagarina'],
                           ['–ü–µ—Å–Ω—è5.mp3', '/Femlove', '/King_and_the_Clown', '/Mucca', 'Danya_Milokhin'],
                           ['–ü–µ—Å–Ω—è6.mp3', '/Artur_Pirozhkov', '/Khabib', '/Morgenshtern', '/Eldar_Dzharakhov'],
                           ['–ü–µ—Å–Ω—è7.mp3', '/Dabro', '/Egor_Creed', '/Eldar_Dzharakhov', '/Danya_Milokhin'],
                           ['–ü–µ—Å–Ω—è8.mp3', '/Billie_Eilish', '/Ariana_Grande', '/Selena_Gomez', '/Taylor_Swift'],
                           ['–ü–µ—Å–Ω—è9.mp3', '/BTS', '/EXO', '/XXXTENTACION', '/Kanye_West'],
                           ['–ü–µ—Å–Ω—è10.mp3', '/DEAD_BLONDE', '/Mia_Boyko', '/Maby_Baby', '/Alena_Shvets'],
                           ['–ü–µ—Å–Ω—è11.mp3', '/Nervy', '/King_and_the_Clown', '/friend_zone',
                            '/Timati']]  # —Å–ø–∏—Å–æ–∫ –º–µ–ª–æ–¥–∏–π –¥–ª—è –∏–≥—Ä—ã –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É: –º—É–∑—ã–∫–∞, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è

art_list = [['–ö–∞—Ä—Ç–∏–Ω–∞1.jpg', '/DIEGO_VELAZQUEZ', '/SANDRO_BOTTICELLI', '/PABLO_PICASSO', '/RAFAEL_SANTI'],
            ['–ö–∞—Ä—Ç–∏–Ω–∞2.jpg', '/VINCENT_VAN_GOGH', '/PABLO_PICASSO', '/MICHELANGELO_CARAVAGGIO', '/EUGENE_DELACROIX'],
            ['–ö–∞—Ä—Ç–∏–Ω–∞3.jpg', '/EDWARD_MUNK', '/SANDRO_BOTTICELLI', '/MICHELANGELO_CARAVAGGIO', '/JACKSON_POLLOCK'],
            ['–ö–∞—Ä—Ç–∏–Ω–∞4.jpg', '/SALVADOR_DALI', '/PABLO_PICASSO', '/JACKSON_POLLOCK', '/JEROME_BOSCH'],
            ['–ö–∞—Ä—Ç–∏–Ω–∞5.jpg', '/OREST_KIPRENSKY', '/SANDRO_BOTTICELLI', '/KAZIMIR_MALEVICH', '/JEROME_BOSCH'],
            ['–ö–∞—Ä—Ç–∏–Ω–∞6.jpg', '/REMBRANDT_VAN_RHINE', '/RAFAEL_SANTI', '/MICHELANGELO_CARAVAGGIO', '/JEROME_BOSCH'],
            ['–ö–∞—Ä—Ç–∏–Ω–∞7.jpg', '/BANKSY', '/SANDRO_BOTTICELLI', '/KAZIMIR_MALEVICH', '/JEROME_BOSCH'],
            ['–ö–∞—Ä—Ç–∏–Ω–∞8.jpg', '/LEONARDO_DA_VINCI', '/RAFAEL_SANTI', '/JACKSON_POLLOCK', '/EUGENE_DELACROIX'],
            ['–ö–∞—Ä—Ç–∏–Ω–∞9.jpg', '/CLAUDE_MONET', '/PABLO_PICASSO', '/KAZIMIR_MALEVICH',
             '/EUGENE_DELACROIX']]  # —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–∏–Ω –¥–ª—è –∏–≥—Ä—ã –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏—Å–∫—É—Å—Å—Ç–≤–æ

films_list = [
    ['–§–∏–ª—å–º1.jpg', '/Krik', '/Pyatnitsa_13', '/Krovavoye_leto', '/Tretiy_Lishniy'],
    ['–§–∏–ª—å–º2.jpg', '/Tachki', '/Gonka_Pushechnoye_yadro', '/Avtomobili', '/Beregis_avtomobilya'],
    ['–§–∏–ª—å–º3.jpg', '/Kavkazskaya_plennitsa', '/Ironiya_Sudby_ili_s_logkim_parom',
     '/Afonya', '/Dozhivem_do_ponedelnika'],
    ['–§–∏–ª—å–º4.jpg', '/Sudya_Dredd', '/Razrushitel', '/Kobra', '/Politseyskiy_bespredel'],
    ['–§–∏–ª—å–º5.jpg', '/Titanik', '/1912', '/Kapitan_Kryuk', '/Romeo_Dzhulyetta'],
    ['–§–∏–ª—å–º6.jpg', '/Angely_Charli', '/Komanda_A', '/8_Podrug_Oushena', '/Operatsiya_Argo'],
    ['–§–∏–ª—å–º7.jpg', '/Office', '/Biezumcy', '/Kak_ya_vstretil_vashu_mamu', '/Malkolm_v_tsentre_vnimaniya'],
    ['–§–∏–ª—å–º8.jpg', '/Alexander', '/Troya', '/Bogi_i_Monstry', '/Gladiator'],
    ['–§–∏–ª—å–º9.jpg', '/Amerikanskiy_Pirog', '/Euro_Tour', '/Super_Pertsy', '/Tretiy_Lishniy'],
    ['–§–∏–ª—å–º10.jpg', '/Brat', '/Den_rozhdeniya_Burzhuya', '/Boomer', '/Brigada'],
    ['–§–∏–ª—å–º11.jpg', '/Lyudi_v_chornom_2', '/Lyudi_v_chornom', '/Lyudi_v_chornom_interneshnl', '/Lyudi_v_chornom_3'],
    ['–§–∏–ª—å–º12.jpg', '/Den_Surka', '/Pomni', '/Bolshoy',
     '/Novaya_rozhdestvenskaya_istoriya']]  # —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–∏–Ω –¥–ª—è –∏–≥—Ä—ã –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É —Ñ–∏–ª—å–º—ã

music_list_classic_new = music_list_classic  # –¥–ª—è –∏–≥—Ä—ã –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É: –º—É–∑—ã–∫–∞
music_list_contemporary_new = music_list_contemporary
ans_music = ''

art_list_new = art_list  # –¥–ª—è –∏–≥—Ä—ã –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É: –∏—Å–∫—É—Å—Å—Ç–≤–æ
ans_art = ''

films_list_new = films_list
ans_film = ''

nomer = 0
points = 0


def start(update, context):  # –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_name = update.message.chat.first_name
    update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {user_name} üòä")
    reply_keyboard = [['/skills']]  # –∫–Ω–æ–ø–∫–∞
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    update.message.reply_text("–ú–µ–Ω—è –∑–æ–≤—É—Ç –°–ª–æ–≤–µ—Å–Ω—ã–π –±–æ—Ç", reply_markup=markup)


def skills(update, context):  # –Ω–∞–≤—ã–∫–∏ –±–æ—Ç–∞
    reply_keyboard = [['/play']]  # –∫–Ω–æ–ø–∫–∞
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    text = '\n'.join(["‚úÖ /play - –≤—ã–±—Ä–∞—Ç—å –∏ —Å—ã–≥—Ä–∞—Ç—å —Å –±–æ—Ç–æ–º –≤ —Å–ª–æ–≤–µ—Å–Ω—É—é –∏–≥—Ä—É"])
    update.message.reply_text(text, reply_markup=markup)


def play(update, context):  # –≤—ã–±–æ—Ä –∏–≥—Ä—ã
    reply_keyboard = [['/goroda', '/quiz']]  # –∫–Ω–æ–ø–∫–∞
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    update.message.reply_text('–í –∫–∞–∫—É—é –∏–≥—Ä—É —Ç—ã —Ö–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å?', reply_markup=markup)


def quiz(update, context):  # –∏–≥—Ä–∞ - –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞
    reply_keyboard = [['/movie'], ['/art', '/music']]  # –∫–Ω–æ–ø–∫–∞
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    update.message.reply_text('–í –∫–∞–∫—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å?', reply_markup=markup)


def music(update, context):  # –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞, –º—É–∑—ã–∫–∞
    global music_list_classic_new, nomer, points, music_list_contemporary_new
    nomer = 0
    points = 0
    random.shuffle(music_list_classic, random.random)
    music_list_classic_new = music_list_classic
    random.shuffle(music_list_contemporary, random.random)
    music_list_contemporary_new = music_list_contemporary
    reply_keyboard = [['/contemporary', '/classic']]  # –∫–Ω–æ–ø–∫–∞
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É', reply_markup=markup)


def classic(update, context):  # –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞, –º—É–∑—ã–∫–∞
    global ans_music, nomer
    if nomer != 5:
        options = [music_list_classic_new[nomer][1], music_list_classic_new[nomer][-1],
                   music_list_classic_new[nomer][-2], music_list_classic_new[nomer][-3]]
        ans_music = options[0][::]
        random.shuffle(options, random.random)
        reply_keyboard = [[options[0], options[1]], [options[2], options[3]]]  # –∫–Ω–æ–ø–∫–∞
        markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
        chat_id = update.message.chat.id
        meleodia = music_list_classic_new[nomer][0]
        nomer += 1
        context.bot.send_audio(chat_id=chat_id, audio=open(meleodia, 'rb'))
        update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–∞', reply_markup=markup)
    else:
        text = '–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ' + str(points) + ' –∏–∑ 5'
        update.message.reply_text(text)


def contemporary(update, context):  # –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞, –º—É–∑—ã–∫–∞
    global ans_music, nomer
    if nomer != 5:
        options = [music_list_contemporary_new[nomer][1], music_list_contemporary_new[nomer][-1],
                   music_list_contemporary_new[nomer][-2], music_list_contemporary_new[nomer][-3]]
        ans_music = options[0][::]
        random.shuffle(options, random.random)
        reply_keyboard = [[options[0], options[1]], [options[2], options[3]]]  # –∫–Ω–æ–ø–∫–∞
        markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
        chat_id = update.message.chat.id
        meleodia = music_list_contemporary_new[nomer][0]
        nomer += 1
        context.bot.send_audio(chat_id=chat_id, audio=open(meleodia, 'rb'))
        update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è', reply_markup=markup)
    else:
        text = '–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ' + str(points) + ' –∏–∑ 5'
        update.message.reply_text(text)


def music_check_mistake(update, context):  # –í —Å–ª—É—á–∞–µ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    global points
    reply_keyboard = [['/next_contemporary']]  # –∫–Ω–æ–ø–∫–∞
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    text = '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ' + ans_music[1:]
    update.message.reply_text(text, reply_markup=markup)


def music_check_right(update, context):  # –í —Å–ª—É—á–∞–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    global points
    reply_keyboard = [['/next_contemporary']]  # –∫–Ω–æ–ø–∫–∞
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ', reply_markup=markup)
    points += 1


def art(update, context):  # –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞, –∫–∞—Ä—Ç–∏–Ω—ã
    global art_list, nomer, points, art_list_new
    nomer = 0
    points = 0
    random.shuffle(art_list, random.random)
    art_list_new = art_list
    reply_keyboard = [['/next_art']]  # –∫–Ω–æ–ø–∫–∞
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    update.message.reply_text('–£–¥–∞—á–∏)', reply_markup=markup)


def next_art(update, context):  # –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞, –º—É–∑—ã–∫–∞
    global ans_art, nomer
    if nomer != 5:
        options = [art_list_new[nomer][1], art_list_new[nomer][-1],
                   art_list_new[nomer][-2], art_list_new[nomer][-3]]
        ans_art = options[0][::]
        random.shuffle(options, random.random)
        reply_keyboard = [[options[0], options[1]], [options[2], options[3]]]  # –∫–Ω–æ–ø–∫–∞
        markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
        chat_id = update.message.chat.id
        picture = art_list_new[nomer][0]
        nomer += 1
        context.bot.send_photo(chat_id=chat_id, photo=open(picture, 'rb'))
        update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ö—É–¥–æ–∂–Ω–∏–∫–∞', reply_markup=markup)
    else:
        text = '–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ' + str(points) + ' –∏–∑ 5'
        update.message.reply_text(text)


def paintings_check_mistake(update, context):  # –í —Å–ª—É—á–∞–µ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    global points
    reply_keyboard = [['/next_art']]  # –∫–Ω–æ–ø–∫–∞
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    text = '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ' + ans_art[1:]
    update.message.reply_text(text, reply_markup=markup)


def paintings_check_right(update, context):  # –í —Å–ª—É—á–∞–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    global points
    reply_keyboard = [['/next_art']]  # –∫–Ω–æ–ø–∫–∞
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ', reply_markup=markup)
    points += 1


def movie(update, context):  # –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞, –∫–∞—Ä—Ç–∏–Ω—ã
    global films_list, nomer, points, films_list_new
    nomer = 0
    points = 0
    random.shuffle(films_list, random.random)
    films_list_new = films_list
    reply_keyboard = [['/next_movie']]  # –∫–Ω–æ–ø–∫–∞
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    update.message.reply_text('–£–¥–∞—á–∏)', reply_markup=markup)


def next_movie(update, context):  # –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞, –º—É–∑—ã–∫–∞
    global ans_film, nomer
    if nomer != 5:
        options = [films_list_new[nomer][1], films_list_new[nomer][-1],
                   films_list_new[nomer][-2], films_list_new[nomer][-3]]
        ans_film = options[0][::]
        random.shuffle(options, random.random)
        reply_keyboard = [[options[0], options[1]], [options[2], options[3]]]  # –∫–Ω–æ–ø–∫–∞
        markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
        chat_id = update.message.chat.id
        picture = films_list_new[nomer][0]
        nomer += 1
        context.bot.send_photo(chat_id=chat_id, photo=open(picture, 'rb'))
        update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞', reply_markup=markup)
    else:
        text = '–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ' + str(points) + ' –∏–∑ 5'
        update.message.reply_text(text)


def logics_check_mistake(update, context):  # –í —Å–ª—É—á–∞–µ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    global points
    reply_keyboard = [['/next_movie']]  # –∫–Ω–æ–ø–∫–∞
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    text = '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ' + ans_film[1:]
    update.message.reply_text(text, reply_markup=markup)


def logics_check_right(update, context):  # –í —Å–ª—É—á–∞–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    global points
    reply_keyboard = [['/next_movie']]  # –∫–Ω–æ–ø–∫–∞
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ', reply_markup=markup)
    points += 1


def bach(update, context):  # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: –º—É–∑—ã–∫–∞, –∫–ª–∞—Å—Å–∏–∫–∞
    global points
    reply_keyboard = [['/next_classic']]  # –∫–Ω–æ–ø–∫–∞
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    if ans_music == '/Bach':
        update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ', reply_markup=markup)
        points += 1
    else:
        text = '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ' + ans_music[1:]
        update.message.reply_text(text, reply_markup=markup)


def glinka(update, context):  # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: –º—É–∑—ã–∫–∞, –∫–ª–∞—Å—Å–∏–∫–∞
    global points
    reply_keyboard = [['/next_classic']]  # –∫–Ω–æ–ø–∫–∞
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    if ans_music == '/Glinka':
        update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ', reply_markup=markup)
        points += 1
    else:
        text = '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ' + ans_music[1:]
        update.message.reply_text(text, reply_markup=markup)


def schubert(update, context):  # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: –º—É–∑—ã–∫–∞, –∫–ª–∞—Å—Å–∏–∫–∞
    global points
    reply_keyboard = [['/next_classic']]  # –∫–Ω–æ–ø–∫–∞
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    if ans_music == '/Schubert':
        update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ', reply_markup=markup)
        points += 1
    else:
        text = '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ' + ans_music[1:]
        update.message.reply_text(text, reply_markup=markup)


def chajjkovskijj(update, context):  # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: –º—É–∑—ã–∫–∞, –∫–ª–∞—Å—Å–∏–∫–∞
    global points
    reply_keyboard = [['/next_classic']]  # –∫–Ω–æ–ø–∫–∞
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    if ans_music == '/Chajjkovskijj':
        update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ', reply_markup=markup)
        points += 1
    else:
        text = '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ' + ans_music[1:]
        update.message.reply_text(text, reply_markup=markup)


def betkhoven(update, context):  # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: –º—É–∑—ã–∫–∞, –∫–ª–∞—Å—Å–∏–∫–∞
    global points
    reply_keyboard = [['/next_classic']]  # –∫–Ω–æ–ø–∫–∞
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    if ans_music == '/Betkhoven':
        update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ', reply_markup=markup)
        points += 1
    else:
        text = '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ' + ans_music[1:]
        update.message.reply_text(text, reply_markup=markup)


def chopin(update, context):  # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: –º—É–∑—ã–∫–∞, –∫–ª–∞—Å—Å–∏–∫–∞
    global points
    reply_keyboard = [['/next_classic']]  # –∫–Ω–æ–ø–∫–∞
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    if ans_music == '/Chopin':
        update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ', reply_markup=markup)
        points += 1
    else:
        text = '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ' + ans_music[1:]
        update.message.reply_text(text, reply_markup=markup)


def vivaldi(update, context):  # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: –º—É–∑—ã–∫–∞, –∫–ª–∞—Å—Å–∏–∫–∞
    global points
    reply_keyboard = [['/next_classic']]  # –∫–Ω–æ–ø–∫–∞
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    if ans_music == '/Vivaldi':
        update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ', reply_markup=markup)
        points += 1
    else:
        text = '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ' + ans_music[1:]
        update.message.reply_text(text, reply_markup=markup)


def grig(update, context):  # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: –º—É–∑—ã–∫–∞, –∫–ª–∞—Å—Å–∏–∫–∞
    global points
    reply_keyboard = [['/next_classic']]  # –∫–Ω–æ–ø–∫–∞
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    if ans_music == '/Grig':
        update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ', reply_markup=markup)
        points += 1
    else:
        text = '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ' + ans_music[1:]
        update.message.reply_text(text, reply_markup=markup)


def mocart(update, context):  # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: –º—É–∑—ã–∫–∞, –∫–ª–∞—Å—Å–∏–∫–∞
    global points
    reply_keyboard = [['/next_classic']]  # –∫–Ω–æ–ø–∫–∞
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    if ans_music == '/Mocart':
        update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ', reply_markup=markup)
        points += 1
    else:
        text = '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ' + ans_music[1:]
        update.message.reply_text(text, reply_markup=markup)


def start_goroda(update, context):  # –∏–≥—Ä–∞ - –≥–æ—Ä–æ–¥–∞
    text = '\n '.join(["–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ –∏–≥—Ä–µ –≥–æ—Ä–æ–¥–∞! –ù–∞–ø–∏—à–∏ \'Go\', –µ—Å–ª–∏ —Ö–æ—á–µ—à—å, —á—Ç–æ–± –º—ã –Ω–∞—á–∞–ª–∏.",
                       "–í –ª—é–±–æ–µ –≤—Ä–µ–º—è –Ω–∞–ø–∏—à–∏ /stop –∏ –º—ã –∑–∞–∫–æ–Ω—á–∏–º –∏–≥—Ä—É.",
                       "–ü—Ä–∞–≤–∏–ª–∞: –ì–æ—Ä–æ–¥–∞ –Ω–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ.",
                       "–í–≤–æ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã, —Å—Ç–∞–≤—å—Ç–µ –¥–µ—Ñ–∏—Å—ã –∏ –ø—Ä–æ–±–µ–ª—ã, –≥–¥–µ –Ω—É–∂–Ω–æ."
                       "–ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≥–æ—Ä–æ–¥ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ '—å', '—ã', '—ä' –∏–ª–∏ '–π' (–ü—Ä–æ—Å—Ç–∏ –º–µ–Ω—è, –ô–æ—à–∫–∞—Ä-–û–ª–∞),"
                       " —Ç–æ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ—Ä–æ–¥ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∏–¥—É—â—É—é –ø–µ—Ä–µ–¥ –Ω–µ–π –±—É–∫–≤—É.",
                       "–Ø —Ç–∞–∫–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞—é –≥–æ—Ä–æ–¥, –µ—Å–ª–∏ —Å–º–æ–≥—É –Ω–∞–π—Ç–∏.",
                       "–£–≤–∏–¥–∏—à—å —á—ë—Ä–Ω—ã–π —ç–∫—Ä–∞–Ω - –ø—Ä–æ—Å—Ç–∏, —è –ø—Ä–æ—Å—Ç–æ –º–æ—Ä–≥–Ω—É–ª, –∫–æ–≥–¥–∞ —Ñ–æ—Ç–∫–∞–ª. ",
                       "–ï—Å–ª–∏ —è –Ω–µ —Å–º–æ–≥—É –≤—Å–ø–æ–º–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –Ω–∞ —Ç–≤–æ—é –±—É–∫–≤—É, —Ç–æ —Ç—ã –ø–æ–±–µ–¥–∏—à—å!",
                       "–£–¥–∞—á–∏!"])
    update.message.reply_text(text)
    return 1


def sure_goroda(update, context):  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    ans = update.message.text
    if ans.lower().capitalize() == "Go":
        temp = list(city_data.keys())
        temp = random.choice(temp)
        temp = city_data[temp]
        word = random.choice(temp)

        j = -1
        system_word = word
        while word[j] in ban:
            j -= 1
        if j != -1:
            system_word = word[:j + 1]
        if word[0] not in used_cities:
            used_cities[word[0]] = [system_word]
        else:
            used_cities[word[0]].append(system_word)
        used_cities_log.append(system_word)
        try:
            geocoder_request = f"http://geocode-maps.yandex.ru/1.x/?apikey=40d1649f-0493-4b70-98ba-98533de7710b" \
                               f"&geocode={word}&format=json"
            geocoder_resp = requests.get(geocoder_request).json()
            coord = geocoder_resp["response"]["GeoObjectCollection"]["featureMember"][0]["GeoObject"]["Point"]["pos"]
            coord_request = f"https://static-maps.yandex.ru/1.x/?ll={','.join(coord.split())}&spn=0.252,0.252&l=sat,skl"
            update.message.reply_text(f'–û—Ç–ª–∏—á–Ω–æ. –Ø –Ω–∞—á–Ω—É. –ú–æ–π –≥–æ—Ä–æ–¥: {word}. '
                                      f'–í–∞–º –Ω–∞ {used_cities[word[0]][-1][-1].upper()}')
            update.message.reply_photo(coord_request)
        except IndexError:
            update.message.reply_text(f'–û—Ç–ª–∏—á–Ω–æ. –Ø –Ω–∞—á–Ω—É. –ú–æ–π –≥–æ—Ä–æ–¥: {word}. '
                                      f'–í–∞–º –Ω–∞ {used_cities[word[0]][-1][-1].upper()}')

        return 2
    update.message.reply_text('–ù–µ –ø–æ–Ω—è–ª —Ç–µ–±—è. –ü–æ–≤—Ç–æ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.')
    return 1


def goroda_player_turn(update, context):  # –•–æ–¥ –∏–≥—Ä–æ–∫–∞ –∏ –µ–≥–æ –ø—Ä–æ–≤–µ—Ä–∫–∞
    word = update.message.text

    try:
        j = -1
        system_word = word
        while word[j] in ban:
            j -= 1
        if j != -1:
            system_word = word[:j + 1]
        if system_word in used_cities_log:
            update.message.reply_text(f'–ì–æ—Ä–æ–¥ {word} —É–∂–µ —É–ø–æ–º–∏–Ω–∞–ª—Å—è. –î–∞–≤–∞–π –µ—â—ë —Ä–∞–∑ –∏ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–π—Å—è!')
            return 2
        if word not in city_data[word[0]]:
            update.message.reply_text('–ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ —Ä—É—Å—Å–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞')
            return 2
        if not (used_cities_log[-1][-1] == word[0].lower()):
            update.message.reply_text('–ù–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –±—É–∫–≤–æ–π')
            return 2

        if word[0] not in used_cities:
            used_cities[word[0]] = [system_word]
        else:
            used_cities[word[0]].append(system_word)
        used_cities_log.append(system_word)

        word = goroda_computer_turn(word[0])
        if not word:
            update.message.reply_text('–û–π-–æ–π. –ü–æ—Ö–æ–∂–µ –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏! –ú–æ–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è! –ó–∞–∫–∞–Ω—á–∏–≤–∞—é –∏–≥—Ä—É')
            stop_goroda(update, context)

        try:
            geocoder_request = f"http://geocode-maps.yandex.ru/1.x/?apikey=40d1649f-0493-4b70-98ba-98533de7710b" \
                               f"&geocode={word}&format=json"
            geocoder_resp = requests.get(geocoder_request).json()

            coord = geocoder_resp["response"]["GeoObjectCollection"]["featureMember"][0]["GeoObject"]["Point"]["pos"]

            coord_request = f"https://static-maps.yandex.ru/1.x/?ll={','.join(coord.split())}&spn=0.252,0.252&l=sat,skl"

            update.message.reply_text(f'{random.choice(phrases)} –ú–æ–π –≥–æ—Ä–æ–¥: {word}. '
                                      f'–í–∞–º –Ω–∞ {used_cities[word[0]][-1][-1].upper()}')
            update.message.reply_photo(coord_request)
        except Exception:
            update.message.reply_text(f'{random.choice(phrases)} –ú–æ–π –≥–æ—Ä–æ–¥: {word}. '
                                      f'–í–∞–º –Ω–∞ {used_cities[word[0]][-1][-1].upper()}')
            update.message.reply_text(f'–Ø –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥ –Ω–∞ –∫–∞—Ä—Ç–µ üòû')

        return 2
    except KeyError:
        update.message.reply_text("–¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ø–í–ù–û –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return 2


def goroda_computer_turn(word):  # –•–æ–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
    next_key = used_cities[word[0]][-1][-1].upper()
    if len(city_data[next_key]) == len(used_cities[word[0]]):
        return None

    word = random.choice(city_data[next_key])
    j = -1
    system_word = word
    while word[j] in ban:
        j -= 1
    if j != -1:
        system_word = word[:j + 1]

    while system_word in used_cities_log:
        word = random.choice(city_data[next_key])
        j = -1
        system_word = word
        while word[j] in ban:
            j -= 1
        if j != -1:
            system_word = word[:j + 1]

    if word[0] not in used_cities:
        used_cities[word[0]] = [system_word]
    else:
        used_cities[word[0]].append(system_word)
    used_cities_log.append(system_word)

    return word


def stop_goroda(update, context):  # –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã –≤ –≥–æ—Ä–æ–¥–∞
    update.message.reply_text("–ü—Ä–∏–Ω—è—Ç–æ! –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø–æ–∏–≥—Ä–∞–ª–∏!")
    for i in used_cities.keys():
        del used_cities[i]
    return ConversationHandler.END


def main():  # –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    updater = Updater(
        TOKEN)  # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç updater. # –í–º–µ—Å—Ç–æ —Å–ª–æ–≤–∞ "TOKEN" –Ω–∞–¥–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç @BotFather —Ç–æ–∫–µ–Ω

    dp = updater.dispatcher  # –ü–æ–ª—É—á–∞–µ–º –∏–∑ –Ω–µ–≥–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π.

    conv_handler_goroda = ConversationHandler(
        entry_points=[CommandHandler('goroda', start_goroda)],
        states={
            1: [MessageHandler(Filters.text & ~Filters.command, sure_goroda)],
            2: [MessageHandler(Filters.text & ~Filters.command, goroda_player_turn)],
        },
        fallbacks=[CommandHandler('stop', stop_goroda)]  # –¢–æ—á–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞. –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ ‚Äî –∫–æ–º–∞–Ω–¥–∞ /stop.
    )

    #  –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("skills", skills))
    dp.add_handler(CommandHandler("play", play))
    dp.add_handler(CommandHandler("quiz", quiz))

    dp.add_handler(CommandHandler("music", music))
    dp.add_handler(CommandHandler("classic", classic))
    dp.add_handler(CommandHandler("next_classic", classic))
    dp.add_handler(CommandHandler("next_contemporary", contemporary))
    dp.add_handler(CommandHandler("contemporary", contemporary))
    dp.add_handler(CommandHandler("art", art))
    dp.add_handler(CommandHandler("next_art", next_art))
    dp.add_handler(CommandHandler("movie", movie))
    dp.add_handler(CommandHandler("next_movie", next_movie))

    dp.add_handler(CommandHandler("Bach", bach))
    dp.add_handler(CommandHandler("Glinka", glinka))
    dp.add_handler(CommandHandler("Schubert", schubert))
    dp.add_handler(CommandHandler("Chajjkovskijj", chajjkovskijj))
    dp.add_handler(CommandHandler("Betkhoven", betkhoven))
    dp.add_handler(CommandHandler("Chopin", chopin))
    dp.add_handler(CommandHandler("Vivaldi", vivaldi))
    dp.add_handler(CommandHandler("Grig", grig))
    dp.add_handler(CommandHandler("Mocart", mocart))

    dp.add_handler(CommandHandler("Konfuz", music_check_right))
    dp.add_handler(CommandHandler("Alex_Ataman", music_check_right))
    dp.add_handler(CommandHandler("Jony", music_check_right))
    dp.add_handler(CommandHandler("Klava_Koka", music_check_right))
    dp.add_handler(CommandHandler("Femlove", music_check_right))
    dp.add_handler(CommandHandler("Artur_Pirozhkov", music_check_right))
    dp.add_handler(CommandHandler("Billie_Eilish", music_check_right))
    dp.add_handler(CommandHandler("DEAD_BLONDE", music_check_right))
    dp.add_handler(CommandHandler("BTS", music_check_right))
    dp.add_handler(CommandHandler("Dabro", music_check_right))
    dp.add_handler(CommandHandler("Nervy", music_check_right))

    dp.add_handler(CommandHandler("Ariana_Grande", music_check_mistake))
    dp.add_handler(CommandHandler("Mia_Boyko", music_check_mistake))
    dp.add_handler(CommandHandler("Selena_Gomez", music_check_mistake))
    dp.add_handler(CommandHandler("Taylor_Swift", music_check_mistake))
    dp.add_handler(CommandHandler("Maby_Baby", music_check_mistake))
    dp.add_handler(CommandHandler("Alena_Shvets", music_check_mistake))
    dp.add_handler(CommandHandler("Dora", music_check_mistake))
    dp.add_handler(CommandHandler("Polina_Gagarina", music_check_mistake))
    dp.add_handler(CommandHandler("Egor_Creed", music_check_mistake))
    dp.add_handler(CommandHandler("King_and_the_Clown", music_check_mistake))
    dp.add_handler(CommandHandler("EXO", music_check_mistake))
    dp.add_handler(CommandHandler("XXXTENTACION", music_check_mistake))
    dp.add_handler(CommandHandler("Kanye_West", music_check_mistake))
    dp.add_handler(CommandHandler("friend_zone", music_check_mistake))
    dp.add_handler(CommandHandler("Feduk", music_check_mistake))
    dp.add_handler(CommandHandler("Slava_Marlow", music_check_mistake))
    dp.add_handler(CommandHandler("Khabib", music_check_mistake))
    dp.add_handler(CommandHandler("Timati", music_check_mistake))
    dp.add_handler(CommandHandler("Mucca", music_check_mistake))
    dp.add_handler(CommandHandler("Eldar_Dzharakhov", music_check_mistake))
    dp.add_handler(CommandHandler("Morgenshtern", music_check_mistake))
    dp.add_handler(CommandHandler("Danya_Milokhin", music_check_mistake))

    dp.add_handler(CommandHandler("DIEGO_VELAZQUEZ", paintings_check_right))
    dp.add_handler(CommandHandler("VINCENT_VAN_GOGH", paintings_check_right))
    dp.add_handler(CommandHandler("EDWARD_MUNK", paintings_check_right))
    dp.add_handler(CommandHandler("SALVADOR_DALI", paintings_check_right))
    dp.add_handler(CommandHandler("OREST_KIPRENSKY", paintings_check_right))
    dp.add_handler(CommandHandler("REMBRANDT_VAN_RHINE", paintings_check_right))
    dp.add_handler(CommandHandler("BANKSY", paintings_check_right))
    dp.add_handler(CommandHandler("LEONARDO_DA_VINCI", paintings_check_right))
    dp.add_handler(CommandHandler("CLAUDE_MONET", paintings_check_right))

    dp.add_handler(CommandHandler("SANDRO_BOTTICELLI", paintings_check_mistake))
    dp.add_handler(CommandHandler("PABLO_PICASSO", paintings_check_mistake))
    dp.add_handler(CommandHandler("RAFAEL_SANTI", paintings_check_mistake))
    dp.add_handler(CommandHandler("MICHELANGELO_CARAVAGGIO", paintings_check_mistake))
    dp.add_handler(CommandHandler("KAZIMIR_MALEVICH", paintings_check_mistake))
    dp.add_handler(CommandHandler("JACKSON_POLLOCK", paintings_check_mistake))
    dp.add_handler(CommandHandler("EUGENE_DELACROIX", paintings_check_mistake))
    dp.add_handler(CommandHandler("JEROME_BOSCH", paintings_check_mistake))

    dp.add_handler(CommandHandler("Krik", logics_check_right))
    dp.add_handler(CommandHandler("Tachki", logics_check_right))
    dp.add_handler(CommandHandler("Kavkazskaya_plennitsa", logics_check_right))
    dp.add_handler(CommandHandler("Dozhivem_do_ponedelnika", logics_check_right))
    dp.add_handler(CommandHandler("Titanik", logics_check_right))
    dp.add_handler(CommandHandler("Sudya_Dredd", logics_check_right))
    dp.add_handler(CommandHandler("Angely_Charli", logics_check_right))
    dp.add_handler(CommandHandler("Office", logics_check_right))
    dp.add_handler(CommandHandler("Alexander", logics_check_right))
    dp.add_handler(CommandHandler("Amerikanskiy_Pirog", logics_check_right))
    dp.add_handler(CommandHandler("Brat", logics_check_right))
    dp.add_handler(CommandHandler("Lyudi_v_chornom_2", logics_check_right))
    dp.add_handler(CommandHandler("Den_Surka", logics_check_right))

    dp.add_handler(CommandHandler("Pyatnitsa_13", logics_check_mistake))
    dp.add_handler(CommandHandler("Krovavoye_leto", logics_check_mistake))
    dp.add_handler(CommandHandler("Gonka_Pushechnoye_yadro", logics_check_mistake))
    dp.add_handler(CommandHandler("Avtomobili", logics_check_mistake))
    dp.add_handler(CommandHandler("Beregis_avtomobilya", logics_check_mistake))
    dp.add_handler(CommandHandler("Ironiya_Sudby_ili_s_logkim_parom", logics_check_mistake))
    dp.add_handler(CommandHandler("Afonya", logics_check_mistake))
    dp.add_handler(CommandHandler("Kobra", logics_check_mistake))
    dp.add_handler(CommandHandler("Razrushitel", logics_check_mistake))
    dp.add_handler(CommandHandler("Politseyskiy_bespredel", logics_check_mistake))
    dp.add_handler(CommandHandler("1912", logics_check_mistake))
    dp.add_handler(CommandHandler("Kapitan_Kryuk", logics_check_mistake))
    dp.add_handler(CommandHandler("Romeo_Dzhulyetta", logics_check_mistake))
    dp.add_handler(CommandHandler("Komanda_A", logics_check_mistake))
    dp.add_handler(CommandHandler("8_Podrug_Oushena", logics_check_mistake))
    dp.add_handler(CommandHandler("Operatsiya_Argo", logics_check_mistake))
    dp.add_handler(CommandHandler("Biezumcy", logics_check_mistake))
    dp.add_handler(CommandHandler("Kak_ya_vstretil_vashu_mamu", logics_check_mistake))
    dp.add_handler(CommandHandler("Malkolm_v_tsentre_vnimaniya", logics_check_mistake))
    dp.add_handler(CommandHandler("Troya", logics_check_mistake))
    dp.add_handler(CommandHandler("Bogi_i_Monstry", logics_check_mistake))
    dp.add_handler(CommandHandler("Gladiator", logics_check_mistake))
    dp.add_handler(CommandHandler("Euro_Tour", logics_check_mistake))
    dp.add_handler(CommandHandler("Super_Pertsy", logics_check_mistake))
    dp.add_handler(CommandHandler("Tretiy_Lishniy", logics_check_mistake))
    dp.add_handler(CommandHandler("Den_rozhdeniya_Burzhuya", logics_check_mistake))
    dp.add_handler(CommandHandler("Boomer", logics_check_mistake))
    dp.add_handler(CommandHandler("Brigada", logics_check_mistake))
    dp.add_handler(CommandHandler("Lyudi_v_chornom", logics_check_mistake))
    dp.add_handler(CommandHandler("Lyudi_v_chornom_interneshnl", logics_check_mistake))
    dp.add_handler(CommandHandler("Lyudi_v_chornom_3", logics_check_mistake))
    dp.add_handler(CommandHandler("Pomni", logics_check_mistake))
    dp.add_handler(CommandHandler("Bolshoy", logics_check_mistake))
    dp.add_handler(CommandHandler("Novaya_rozhdestvenskaya_istoriya", logics_check_mistake))

    dp.add_handler(conv_handler_goroda)

    updater.start_polling()  # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –ø—Ä–∏–µ–º–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
    updater.idle()  # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. # (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ SIG_TERM –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–ª–∞–≤–∏—à Ctrl+C)


if __name__ == '__main__':  # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é main() –≤ —Å–ª—É—á–∞–µ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞.
    main()
